<?xml version="1.0"?>
<QALCULATE version="0.3">
  <builtin_function name="zeta">
    <_title>Riemann Zeta</_title>
  </builtin_function>
  <category>
    <_title>Logical</_title>
    <builtin_function name="for">
      <_title>for...do</_title>
    </builtin_function>
    <builtin_function name="if">
      <_title>If...Then...Else</_title>
      <_description>Tests a condition and returns a value depending on the result.</_description>
      <argument index="1">
        <_title>Condition</_title>
      </argument>
      <argument index="2">
        <_title>Expression if condition met</_title>
      </argument>
      <argument index="3">
        <_title>Expression if condition NOT met</_title>
      </argument>
    </builtin_function>
  </category>
  <category>
    <_title>Utilities</_title>
    <builtin_function name="process">
      <_title>Process components</_title>
    </builtin_function>
    <builtin_function name="csum">
      <_title>Custom sum of components</_title>
    </builtin_function>
    <builtin_function name="function">
      <_title>Function</_title>
    </builtin_function>
    <builtin_function name="title">
      <_title>Function Title</_title>
    </builtin_function>
    <builtin_function name="save">
      <_title>Save as variable</_title>
    </builtin_function>
    <builtin_function name="concatenate">
      <_title>Concatenate strings</_title>
    </builtin_function>
    <builtin_function name="len">
      <_title>Length of string</_title>
    </builtin_function>
    <builtin_function name="warning">
      <_title>Display warning</_title>
    </builtin_function>
    <builtin_function name="error">
      <_title>Display error</_title>
    </builtin_function>
  </category>
  <category>
    <_title>Matrices &amp; Vectors</_title>
    <builtin_function name="matrix">
      <_title>Construct Matrix</_title>
      <argument index="1">
        <_title>Rows</_title>
      </argument>
      <argument index="2">
        <_title>Columns</_title>
      </argument>
    </builtin_function>
    <builtin_function name="vector">
      <_title>Construct Vector</_title>
    </builtin_function>
    <builtin_function name="elements">
      <_title>Elements</_title>
    </builtin_function>
    <builtin_function name="sort">
      <_title>Sort</_title>
    </builtin_function>
    <builtin_function name="rank">
      <_title>Rank</_title>
    </builtin_function>
    <builtin_function name="matrix2vector">
      <_title>Convert Matrix to Vector</_title>
    </builtin_function>
    <builtin_function name="row">
      <_title>Extract Row as Vector</_title>
    </builtin_function>
    <builtin_function name="column">
      <_title>Extract Column as Vector</_title>
    </builtin_function>
    <builtin_function name="rows">
      <_title>Rows</_title>
    </builtin_function>
    <builtin_function name="columns">
      <_title>Columns</_title>
    </builtin_function>
    <builtin_function name="element">
      <_title>Element</_title>
    </builtin_function>
    <builtin_function name="components">
      <_title>Components</_title>
    </builtin_function>
    <builtin_function name="component">
      <_title>Component</_title>
    </builtin_function>
    <builtin_function name="limits">
      <_title>Limits</_title>
    </builtin_function>
    <builtin_function name="transpose">
      <_title>Transpose</_title>
    </builtin_function>
    <builtin_function name="identity">
      <_title>Identity</_title>
    </builtin_function>
    <builtin_function name="det">
      <_title>Determinant</_title>
    </builtin_function>
    <builtin_function name="cofactor">
      <_title>Cofactor</_title>
    </builtin_function>
    <builtin_function name="adj">
      <_title>Adjoint</_title>
    </builtin_function>
    <builtin_function name="inverse">
      <_title>Inverse</_title>
    </builtin_function>
    <function name="norm">
      <_title>Norm (length)</_title>
      <expression>abs((\v*\v)^(1/2))</expression>
      <argument type="vector" index="1">
        <_title>Vector</_title>
        <test>false</test>
      </argument>
    </function>
  </category>
  <category>
    <_title>Experimental</_title>
    <builtin_function name="diff" active="false">
      <_title>Differentiate</_title>
      <argument index="1">
        <_title>Expression</_title>
      </argument>
      <argument index="2">
        <_title>With respect to</_title>
      </argument>
    </builtin_function>
  </category>
  <category>
    <_title>Date &amp; Time</_title>
    <builtin_function name="days">
      <_title>Days between two dates</_title>
    </builtin_function>
    <builtin_function name="yearfrac">
      <_title>Years between two dates</_title>
    </builtin_function>
  </category>
  <category>
    <_title>Arithmetics</_title>
    <builtin_function name="gcd">
      <_title>Greatest Common Divisor</_title>
      <argument index="1">
        <_title>1st Number</_title>
      </argument>
      <argument index="2">
        <_title>2nd Number</_title>
      </argument>
    </builtin_function>
    <builtin_function name="factorial">
      <_title>Factorial</_title>
    </builtin_function>
    <builtin_function name="abs">
      <_title>Absolute Value</_title>
    </builtin_function>
    <builtin_function name="ceil">
      <_title>Round upwards</_title>
    </builtin_function>
    <builtin_function name="floor">
      <_title>Round downwards</_title>
    </builtin_function>
    <builtin_function name="trunc">
      <_title>Round towards zero</_title>
    </builtin_function>
    <builtin_function name="round">
      <_title>Round</_title>
    </builtin_function>
    <builtin_function name="frac">
      <_title>Extract fractional part</_title>
    </builtin_function>
    <builtin_function name="int">
      <_title>Extract integer part</_title>
    </builtin_function>
    <builtin_function name="mod">
      <_title>Reminder (mod)</_title>
      <argument index="1">
        <_title>Numerator</_title>
      </argument>
      <argument index="2">
        <_title>Denominator</_title>
      </argument>
    </builtin_function>
    <builtin_function name="rem">
      <_title>Reminder (rem)</_title>
      <argument index="1">
        <_title>Numerator</_title>
      </argument>
      <argument index="2">
        <_title>Denominator</_title>
      </argument>
    </builtin_function>
  </category>
  <category>
    <_title>Trigonometry</_title>
    <builtin_function name="sin">
      <_title>Sine</_title>
    </builtin_function>
    <builtin_function name="cos">
      <_title>Cosine</_title>
    </builtin_function>
    <builtin_function name="tan">
      <_title>Tangent</_title>
    </builtin_function>
    <builtin_function name="sinh">
      <_title>Hyperbolic sine</_title>
    </builtin_function>
    <builtin_function name="cosh">
      <_title>Hyperbolic cosine</_title>
    </builtin_function>
    <builtin_function name="tanh">
      <_title>Hyperbolic tangent</_title>
    </builtin_function>
    <builtin_function name="asin">
      <_title>Arcsine</_title>
    </builtin_function>
    <builtin_function name="acos">
      <_title>Arccosine</_title>
    </builtin_function>
    <builtin_function name="atan">
      <_title>Arctangent</_title>
    </builtin_function>
    <builtin_function name="asinh">
      <_title>Hyperbolic arcsine</_title>
    </builtin_function>
    <builtin_function name="acosh">
      <_title>Hyperbolic arccosine</_title>
    </builtin_function>
    <builtin_function name="atanh">
      <_title>Hyperbolic arctangent</_title>
    </builtin_function>
    <function name="rad2deg">
      <_title>Radians to Degrees</_title>
      <expression>\x*180/pi</expression>
      <argument type="free" index="1">
        <_title>Radians</_title>
      </argument>
    </function>
    <function name="deg2rad">
      <_title>Degrees to Radians</_title>
      <expression>\x*pi/180</expression>
      <argument type="free" index="1">
        <_title>Degrees</_title>
      </argument>
    </function>
    <function name="rad2gra">
      <_title>Radians to Gradians</_title>
      <expression>\x*200/pi</expression>
      <argument type="free" index="1">
        <_title>Radians</_title>
      </argument>
    </function>
    <function name="gra2rad">
      <_title>Gradians to Radians</_title>
      <expression>\x*pi/200</expression>
      <argument type="free" index="1">
        <_title>Gradians</_title>
      </argument>
    </function>
    <function name="deg2gra">
      <_title>Degrees to Gradians</_title>
      <expression>\x*400/360</expression>
      <argument type="free" index="1">
        <_title>Degrees</_title>
      </argument>
    </function>
    <function name="gra2deg">
      <_title>Gradians to Degrees</_title>
      <expression>\x*360/400</expression>
      <argument type="free" index="1">
        <_title>Gradians</_title>
      </argument>
    </function>
  </category>
  <category>
    <_title>Exponents &amp; Logarithms</_title>
    <builtin_function name="ln">
      <_title>Natural Logarithm</_title>
    </builtin_function>
    <builtin_function name="log2">
      <_title>Base-2 Logarithm</_title>
    </builtin_function>
    <builtin_function name="log10">
      <_title>Base-10 Logarithm</_title>
    </builtin_function>
    <builtin_function name="exp">
      <_title>e raised to the power X</_title>
      <argument index="1">
        <_title>Exponent</_title>
      </argument>
    </builtin_function>
    <builtin_function name="exp2">
      <_title>2 raised the to power X</_title>
      <argument index="1">
        <_title>Exponent</_title>
      </argument>
    </builtin_function>
    <builtin_function name="exp10">
      <_title>10 raised the to power X</_title>
      <argument index="1">
        <_title>Exponent</_title>
      </argument>
    </builtin_function>
    <builtin_function name="sqrt">
      <_title>Square Root</_title>
      <argument index="1">
        <_title>Non-negative number</_title>
      </argument>
    </builtin_function>
    <builtin_function name="cbrt">
      <_title>Cube Root</_title>
    </builtin_function>
    <builtin_function name="root">
      <_title>Nth Root</_title>
      <argument index="1">
        <_title>Base</_title>
      </argument>
      <argument index="2">
        <_title>Exponent</_title>
      </argument>
    </builtin_function>
    <builtin_function name="pow">
      <_title>Power</_title>
      <argument index="1">
        <_title>Base</_title>
      </argument>
      <argument index="2">
        <_title>Exponent</_title>
      </argument>
    </builtin_function>
    <function name="sqrtpi">
      <_title>Square Root (x * pi)</_title>
      <_description>Returns the non-negative square root of x * pi</_description>
      <expression>abs((\x*pi)^(1/2))</expression>
      <argument type="number" index="1">
        <_title>Non-negative value</_title>
        <min include_equals="true">0</min>
      </argument>
    </function>
    <function name="log">
      <_title>Base N Logrithm</_title>
      <_description>Returns the base n logarithm.</_description>
      <expression>ln(\x)/ln(\y)</expression>
      <argument type="free" index="1">
        <_title>Value</_title>
      </argument>
      <argument type="number" index="2">
        <_title>Base</_title>
        <min include_equals="true">0</min>
      </argument>
    </function>
  </category>
  <category>
    <_title>Geometry</_title>
    <category>
      <_title>Triangle</_title>
      <builtin_function name="hypot">
        <_title>Hypotenuse</_title>
        <argument index="1">
          <_title>Side 1</_title>
        </argument>
        <argument index="2">
          <_title>Side 2</_title>
        </argument>
      </builtin_function>
      <function name="triangle">
        <_title>Triangle Area</_title>
        <expression>(\x*\y)/2</expression>
        <argument type="free" index="1">
          <_title>Base</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Height</_title>
        </argument>
      </function>
      <function name="triangle_perimeter">
        <_title>Triangle Perimeter</_title>
        <expression>\x+\y+hypot(\x,\y)</expression>
        <argument type="free" index="1">
          <_title>Base</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Height</_title>
        </argument>
      </function>
    </category>
    <category>
      <_title>Circle</_title>
      <function name="circle">
        <_title>Circle Area</_title>
        <_description>Calculates the area of a circle using the radius</_description>
        <expression>\x^2*pi</expression>
        <argument type="free" index="1">
          <_title>Radius</_title>
        </argument>
      </function>
      <function name="circumference">
        <_title>Circle Circumference</_title>
        <_description>Calculates the area of a circle using the diameter</_description>
        <expression>\x*pi</expression>
        <argument type="free" index="1">
          <_title>Diameter</_title>
        </argument>
      </function>
    </category>
    <category>
      <_title>Cylinder</_title>
      <function name="cylinder">
        <_title>Cylinder Volume</_title>
        <expression>\x^2*pi*\y</expression>
      </function>
      <function name="cylinder_sa">
        <_title>Surface Area of Cylinder</_title>
        <expression>2*(\x^2*pi)+2*pi*\x*\y</expression>
        <argument type="free" index="1">
          <_title>Radius</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Height</_title>
        </argument>
      </function>
    </category>
    <category>
      <_title>Cone</_title>
      <function name="cone">
        <_title>Cone Volume</_title>
        <expression>\x^2*pi*\y/3</expression>
      </function>
      <function name="cone_sa">
        <_title>Surface Area of Cone</_title>
        <expression>\x^2*pi+pi*\x*abs((\y^2+\x^2)^(1/2))</expression>
        <argument type="free" index="1">
          <_title>Radius</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Height</_title>
        </argument>
      </function>
    </category>
    <category>
      <_title>Sphere</_title>
      <function name="sphere">
        <_title>Sphere Volume</_title>
        <expression>\x^3*pi*4/3</expression>
      </function>
      <function name="sphere_sa">
        <_title>Surface Area of Sphere</_title>
        <expression>\x^2*pi*4</expression>
        <argument type="free" index="1">
          <_title>Radius</_title>
        </argument>
      </function>
    </category>
    <category>
      <_title>Square</_title>
      <function name="square">
        <_title>Square Area</_title>
        <expression>\x^2</expression>
      </function>
      <function name="square_perimeter">
        <_title>Square Perimeter</_title>
        <expression>\x*4</expression>
        <argument type="free" index="1">
          <_title>Length of side</_title>
        </argument>
      </function>
    </category>
    <category>
      <_title>Cube</_title>
      <function name="cube">
        <_title>Cube Volume</_title>
        <expression>\x^3</expression>
      </function>
      <function name="cube_sa">
        <_title>Surface Area of Cube</_title>
        <expression>(\x^2)*6</expression>
        <argument type="free" index="1">
          <_title>Length of side</_title>
        </argument>
      </function>
    </category>
    <category>
      <_title>Rectangle</_title>
      <function name="rect">
        <_title>Rectangle Area</_title>
        <expression>\x*\y</expression>
        <argument type="free" index="1">
          <_title>Length</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Width</_title>
        </argument>
      </function>
      <function name="rect_perimeter">
        <_title>Rectangle Perimeter</_title>
        <expression>(\x+\y)*2</expression>
        <argument type="free" index="1">
          <_title>Length</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Width</_title>
        </argument>
      </function>
    </category>
    <category>
      <_title>Prism</_title>
      <function name="rectprism">
        <_title>Volume of Rectangular Prism</_title>
        <expression>\x*\y*\z</expression>
        <argument type="free" index="1">
          <_title>Length</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Width</_title>
        </argument>
        <argument type="free" index="3">
          <_title>Height</_title>
        </argument>
      </function>
      <function name="rectprism_sa">
        <_title>Surface Are of Rectangular Prism</_title>
        <expression>(\x*\y)*2+(\x*\z)*2+(\y*\z)*2</expression>
        <argument type="free" index="1">
          <_title>Length</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Width</_title>
        </argument>
        <argument type="free" index="3">
          <_title>Height</_title>
        </argument>
      </function>
      <function name="triangleprism">
        <_title>Volume of Triangular Prism</_title>
        <expression>\x*\y*\z/2</expression>
        <argument type="free" index="1">
          <_title>Length</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Width</_title>
        </argument>
        <argument type="free" index="3">
          <_title>Height</_title>
        </argument>
      </function>
    </category>
    <category>
      <_title>Pyramid</_title>
      <function name="pyramid">
        <_title>Pyramid Volume</_title>
        <expression>\x*\y*\z/3</expression>
        <argument type="free" index="1">
          <_title>Length of base</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Width of base</_title>
        </argument>
        <argument type="free" index="3">
          <_title>Height</_title>
        </argument>
      </function>
    </category>
    <category>
      <_title>Parallelogram</_title>
      <function name="parallelogram">
        <_title>Parallelogram Area</_title>
        <expression>\x*\y</expression>
        <argument type="free" index="1">
          <_title>Base</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Height</_title>
        </argument>
      </function>
      <function name="parallelogram_perimeter">
        <_title>Parallelogram Perimeter</_title>
        <expression>(\x+\y)*2</expression>
        <argument type="free" index="1">
          <_title>Side A</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Side B</_title>
        </argument>
      </function>
    </category>
    <category>
      <_title>Trapezoid</_title>
      <function name="trapezoid">
        <_title>Trapezoid Area</_title>
        <expression>(\x+\y)/2*\z</expression>
        <argument type="free" index="1">
          <_title>Side A</_title>
        </argument>
        <argument type="free" index="2">
          <_title>Side B</_title>
        </argument>
        <argument type="free" index="3">
          <_title>Height</_title>
        </argument>
      </function>
    </category>
  </category>
  <category>
    <_title>Statistics</_title>
    <builtin_function name="sum">
      <_title>Sum</_title>
    </builtin_function>
    <builtin_function name="percentile">
      <_title>Percentile</_title>
    </builtin_function>
    <builtin_function name="min">
      <_title>Min</_title>
    </builtin_function>
    <builtin_function name="max">
      <_title>Max</_title>
    </builtin_function>
    <builtin_function name="mode">
      <_title>Mode</_title>
    </builtin_function>
    <function name="range">
      <_title>Range</_title>
      <expression>max(\v)-min(\v)</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="mean">
      <_title>Mean</_title>
      <expression>sum(\v)/elements(\v)</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="harmmean">
      <_title>Harmonic Mean</_title>
      <expression>elements(\v)/csum(1,-1,0,&quot;\\y+1/\\x&quot;,\v)</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="geomean">
      <_title>Geometric Mean</_title>
      <expression>abs(csum(1,-1,1,&quot;\\y*\\x&quot;,\v)^(1/elements(\v)))</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="trimmean">
      <_title>Trimmed Mean</_title>
      <expression>mean(limits(round(elements(\v)/100*\x),round(elements(\v)/100*(100-\x)),sort(\v)))</expression>
      <argument type="free" index="1">
        <_title>Trimmed percentage</_title>
      </argument>
      <argument type="vector" index="2">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="winsormean">
      <_title>Winsorized Mean</_title>
      <expression>mean(limits(1,round(elements(\v)/100*\x),sort(\v)),limits(round(elements(\v)/100*\x),round(elements(\v)/100*(100-\x)),sort(\v)),limits(round(elements(\v)/100*(100-\x)),-1,sort(\v)))</expression>
      <argument type="free" index="1">
        <_title>Trimmed percentage</_title>
      </argument>
      <argument type="vector" index="2">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="median">
      <_title>Median</_title>
      <expression>percentile(50,\v)</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="quartile">
      <_title>Quartile</_title>
      <expression>percentile(25*\x,\v)</expression>
      <argument type="integer" index="1">
        <_title>Quartile</_title>
        <min>1</min>
      </argument>
      <argument type="vector" index="2">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="decile">
      <_title>Decile</_title>
      <expression>percentile(10*\x,\v)</expression>
      <argument type="number" index="1">
        <_title>Decile</_title>
        <min include_equals="true">0</min>
      </argument>
      <argument type="vector" index="2">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="iqr">
      <_title>Interquartile Range</_title>
      <expression>quartile(3,\v)-quartile(1,\v)</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="rms">
      <_title>Quadratic Mean (RMS)</_title>
      <expression>abs(csum(1,-1,0,&quot;\\y+\\x^2&quot;,\v)/elements(\v)^(1/2))</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="number">
      <_title>Number</_title>
      <expression>elements(\v)</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="stdevp">
      <_title>Standard Deviation (entire population)</_title>
      <expression>abs(csum(1,-1,0,&quot;\\y+(\\x-mean(\v))^2&quot;,\v)/elements(\v)^(1/2))</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="stdev">
      <_title>Standard Deviation (random sampling)</_title>
      <expression>abs(csum(1,-1,0,&quot;\\y+(\\x-mean(\v))^2&quot;,\v)/(elements(\v)-1)^(1/2))</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="varp">
      <_title>Variance (entire population)</_title>
      <expression>csum(1,-1,0,&quot;\\y+(\\x-mean(\v))^2&quot;,\v)/elements(\v)</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="var">
      <_title>Variance (random sampling)</_title>
      <expression>csum(1,-1,0,&quot;\\y+(\\x-mean(\v))^2&quot;,\v)/(elements(\v)-1)</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="stderr">
      <_title>Standard Error</_title>
      <expression>abs((var(\v)/elements(\v))^(1/2))</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="meandev">
      <_title>Mean Deviation</_title>
      <expression>csum(1,-1,0,&quot;\\y+abs(\\x-mean(\v))&quot;,\v)/elements(\v)</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="durbinwatson" active="false">
      <_title>Durbin-Watson</_title>
      <expression precise="false">csum(2,-1,0,&quot;\\y+(\\x-\\x_(\\i-1))^2&quot;,0,\v)/csum(1,-1,0,&quot;\\y+\\x^2&quot;,\v)</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="pearson">
      <_title>Pearson Correlation</_title>
      <expression>(\x*\v-sum(\x)*sum(\v)/elements(\x))/abs(((\x*\x-(sum(\x)^2)/elements(\x))*(\v*\v-(sum(\v)^2)/elements(\v)))^(1/2))</expression>
      <argument type="vector" index="1">
        <_title>Data 1</_title>
        <test>false</test>
      </argument>
      <argument type="vector" index="2">
        <_title>Data 2</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="spearman">
      <_title>Spearman's Rho</_title>
      <expression>pearson(rank(\x),rank(\v))</expression>
      <argument type="vector" index="1">
        <_title>Data 1</_title>
        <test>false</test>
      </argument>
      <argument type="vector" index="2">
        <_title>Data 2</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="covar">
      <_title>Covariance</_title>
      <expression>csum(1,min(elements(\x),elements(\v)),0,&quot;\\y+(\\x-mean(\x))*(\\x_(\\i+elements(\x))-mean(\v))&quot;,\x,\v)/min(elements(\x),elements(\v))</expression>
      <argument type="vector" index="1">
        <_title>Data 1</_title>
        <test>false</test>
      </argument>
      <argument type="vector" index="2">
        <_title>Data 2</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="cor">
      <_title>Statistical Correlation</_title>
      <expression>covar(\x,\v)/(stdev(\x)*stdev(\v))</expression>
      <argument type="vector" index="1">
        <_title>Data 1</_title>
        <test>false</test>
      </argument>
      <argument type="vector" index="2">
        <_title>Data 2</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="correl">
      <_title>Correlation Coefficient</_title>
      <expression>pearson(\x,\v)</expression>
      <argument type="vector" index="1">
        <_title>Data 1</_title>
        <test>false</test>
      </argument>
      <argument type="vector" index="2">
        <_title>Data 2</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="poolvar">
      <_title>Pooled Variance</_title>
      <expression>(csum(1,-1,0,&quot;\\y+(\\x-mean(\x))^2&quot;,\x)+csum(1,-1,0,&quot;\\y+(\\x-mean(\v))^2&quot;,\v))/(elements(\x)+elements(\v)-2)</expression>
      <argument type="vector" index="1">
        <_title>Data 1</_title>
        <test>false</test>
      </argument>
      <argument type="vector" index="2">
        <_title>Data 2</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="weighmean">
      <_title>Weighted Mean</_title>
      <expression>csum(1,min(elements(\x),elements(\v)),0,&quot;\\y+\\x*\\x_(\\i+elements(\x))&quot;,\x,\v)/sum(limits(1,min(elements(\x),elements(\v)),\v))</expression>
      <argument type="vector" index="1">
        <_title>Data</_title>
        <test>false</test>
      </argument>
      <argument type="vector" index="2">
        <_title>Weights</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="ttest">
      <_title>Unpaired T-Test</_title>
      <expression>(mean(\x)-mean(\v))/abs(((poolvar(\x,\v)^2)/elements(\x)+(poolvar(\x,\v)^2)/elements(\v))^(1/2))</expression>
      <argument type="vector" index="1">
        <_title>Data 1</_title>
        <test>false</test>
      </argument>
      <argument type="vector" index="2">
        <_title>Data 2</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="pttest">
      <_title>Paired T-Test</_title>
      <expression>mean(\x-\v)/stderr(\x-\v)</expression>
      <argument type="vector" index="1">
        <_title>Data 1</_title>
        <test>false</test>
      </argument>
      <argument type="vector" index="2">
        <_title>Data 2</_title>
        <test>false</test>
      </argument>
    </function>
    <function name="rayleigh">
      <_title>Rayleigh distribution</_title>
      <_description>Returns the probability density p(x) at x for a Rayleigh distribution with scale parameter sigma. (from Gnumeric)</_description>
      <expression>if(\x &lt; 0,&quot;0&quot;,&quot;(\x/\y)/\y*exp(-(\x/\y)*(\x/\y)/2)&quot;)</expression>
      <argument type="free" index="1">
        <_title>X</_title>
      </argument>
      <argument type="number" index="2">
        <_title>Sigma</_title>
        <min include_equals="true">0</min>
      </argument>
    </function>
    <function name="rayleightail">
      <_title>Rayleigh tail distribution</_title>
      <_description>Returns the probability density p(x) at x for a Rayleigh tail distribution with scale parameter sigma and a lower limit. (from Gnumeric)</_description>
      <expression>if(\x &lt; \y,&quot;0&quot;,&quot;(\x/\z)/\z*exp(((\y/\z)+(\x/\z))*((\y/\z)-(\x/\z))/2)&quot;)</expression>
      <argument type="free" index="1">
        <_title>X</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Lower limit</_title>
      </argument>
      <argument type="number" index="3">
        <_title>Sigma</_title>
        <min include_equals="true">0</min>
      </argument>
    </function>
    <function name="pareto">
      <_title>Pareto distribution</_title>
      <_description>Returns the probability density p(x) at x for a Pareto distribution with exponent and scale. (from Gnumeric)</_description>
      <expression>if(\x &lt; \z,&quot;0&quot;,&quot;(\y/\z)/(\x/\z)^(\y+1)&quot;)</expression>
      <argument type="free" index="1">
        <_title>X</_title>
      </argument>
      <argument type="number" index="2">
        <_title>Exponent</_title>
        <min include_equals="true">0</min>
      </argument>
      <argument type="number" index="3">
        <_title>Scale</_title>
        <min include_equals="true">0</min>
      </argument>
    </function>
    <function name="logistic">
      <_title>Logistic distribution</_title>
      <_description>Returns the probability density p(x) at x for a logistic distribution with scale parameter. (from Gnumeric)</_description>
      <expression>exp(-abs(\x)/\y)/(abs(\y)*(1+exp(-abs(\x)/\y))^2)</expression>
      <argument type="free" index="1">
        <_title>X</_title>
      </argument>
      <argument type="number" index="2">
        <_title>Scale</_title>
        <min include_equals="true">0</min>
      </argument>
    </function>
  </category>
  <category>
    <_title>General</_title>
    <builtin_function name="rand">
      <_title>Random Number</_title>
      <_description>Generates a pseudo-random number between 0 and 1</_description>
    </builtin_function>
  </category>
  <category>
    <_title>Number Bases</_title>
    <builtin_function name="BASE">
      <_title>Number Base</_title>
      <_description>Returns a decimal integer from a number of specified base between 2 and 36</_description>
      <argument index="1">
        <_title>Number</_title>
      </argument>
      <argument index="2">
        <_title>Base</_title>
      </argument>
    </builtin_function>
    <builtin_function name="BIN">
      <_title>Binary</_title>
      <_description>Returns a decimal integer from a binary number</_description>
      <argument index="1">
        <_title>Binary number</_title>
      </argument>
    </builtin_function>
    <builtin_function name="OCT">
      <_title>Octal</_title>
      <_description>Returns a decimal integer from an octal number</_description>
      <argument index="1">
        <_title>Octal number</_title>
      </argument>
    </builtin_function>
    <builtin_function name="HEX">
      <_title>Hexadecimal</_title>
      <_description>Returns a decimal value from a hexadecimal number</_description>
      <argument index="1">
        <_title>Hexadecimal number</_title>
      </argument>
    </builtin_function>
  </category>
  <category>
    <_title>Finance</_title>
    <function name="syd">
      <_title>Sum-of-years digits depreciation</_title>
      <_description>Calculates the sum-of-years digits depreciation for an asset based on its cost, salvage value, anticipated life, and a particular period. This method accelerates the rate of the depreciation, so that more depreciation expense occurs in earlier periods than in later ones. The depreciable cost is the actual cost minus the salvage value. The useful life is the number of periods (typically years) over which the asset is depreciated.</_description>
      <expression>((\x-\y)*(\z-\a+1)*2)/(\z*(\z+1))</expression>
      <argument type="free" index="1">
        <_title>Cost</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Salvage value</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Life</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Period</_title>
      </argument>
    </function>
    <function name="sln">
      <_title>Straight line depreciation</_title>
      <_description>Determines the straight line depreciation of an asset for a single period.
    
Cost is the amount you paid for the asset. Salvage is the value of the asset at the end of the period. Life is the number of periods over which the asset is depreciated. SLN divides the cost evenly over the life of an asset.</_description>
      <expression>(\x-\y)/\z</expression>
      <argument type="free" index="1">
        <_title>Cost</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Salvage value</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Life</_title>
      </argument>
    </function>
    <function name="pv">
      <_title>Present value</_title>
      <_description>Returns the present value of an investment.
    
If type = 1 then the payment is made at the beginning of the period, If type = 0 (or omitted) it is made at the end of each period.</_description>
      <expression>(-\A{0}-\z*(1+\x*\B{0})*(((1+\x)^\y-1)/\x))/((1+\x)^\y)</expression>
      <argument type="free" index="1">
        <_title>Interest rate</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Number of periods</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Payment made each period</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Future value</_title>
      </argument>
      <argument type="boolean" index="5">
        <_title>Type</_title>
      </argument>
    </function>
    <function name="nominal">
      <_title>Nominal interest rate</_title>
      <_description>Calculates the nominal interest rate from a given effective interest rate compounded at given intervals.</_description>
      <expression>\y*(abs((\x+1)^(1/\y))-1)</expression>
      <argument type="free" index="1">
        <_title>Effective interest rate</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Periods</_title>
      </argument>
    </function>
    <function name="zero_coupon">
      <_title>Zero coupon</_title>
      <_description>Calculates the valucalculates the value of a zero-coupon (pure discount) bond.</_description>
      <expression>\x/((1+\y)^\z)</expression>
      <argument type="free" index="1">
        <_title>Face value</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Interest rate</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Years</_title>
      </argument>
    </function>
    <function name="tbillyield">
      <_title>Treasury bill yield</_title>
      <_description>Returns the yield for a treasury bill.</_description>
      <expression>(100-\z)/\z*(360/days(\x,\y,1,1))</expression>
      <argument type="date" index="1">
        <_title>Settlement date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>Maturity date</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Price per $100 face value</_title>
      </argument>
    </function>
    <function name="tbillprice">
      <_title>Treasury bill price</_title>
      <_description>Returns the price per $100 value for a treasury bill.</_description>
      <expression>100*(1-(\z*days(\x,\y,1,1))/360)</expression>
      <argument type="date" index="1">
        <_title>Settlement date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>Maturity date</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Discount rate</_title>
      </argument>
    </function>
    <function name="tbilleq">
      <_title>Treasury bill equivalent</_title>
      <_description>Returns the bond equivalent for a treasury bill.</_description>
      <expression>365*\z/(360-\z*days(\x,\y,1,1))</expression>
      <argument type="date" index="1">
        <_title>Settlement date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>Maturity date</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Discount rate</_title>
      </argument>
    </function>
    <function name="ispmt">
      <_title>Interest paid on a given period of an investment (ISPMT)</_title>
      <_description>Calculates the interest paid on a given period of an investment.</_description>
      <expression>(-\a*\x)-((-\a*\x)/\z*\y)</expression>
      <argument type="free" index="1">
        <_title>Periodic interest rate</_title>
      </argument>
      <argument type="integer" index="2">
        <_title>Amortizement period</_title>
        <min>1</min>
      </argument>
      <argument type="integer" index="3">
        <_title>Number of periods</_title>
        <min>1</min>
      </argument>
      <argument type="free" index="4">
        <_title>Present value</_title>
      </argument>
    </function>
    <function name="pmt">
      <_title>Payment for a loan</_title>
      <_description>Returns the amount of payment for a loan based on a constant interest rate and constant payments (each payment is equal amount).
    
If type = 1 then the payment is made at the beginning of the period, If type = 0 (or omitted) it is made at the end of each period.</_description>
      <expression>(-\z*((1+\x)^\y)-\A{0})/((1+\x*\B{0})*(((1+\x)^\y-1)/\x))</expression>
      <argument type="free" index="1">
        <_title>Rate</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Number of periods</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Present value</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Future value</_title>
      </argument>
      <argument type="boolean" index="5">
        <_title>Type</_title>
      </argument>
    </function>
    <function name="nper">
      <_title>Periods of an investment</_title>
      <_description>Calculates number of periods of an investment based on periodic constant payments and a constant interest rate.
    
Type defines the due date. 1 for payment at the beginning of a period and 0 (default) for payment at the end of a period.</_description>
      <expression>ln((\y*(1+\x*\B{0})-\A{0}*\x)/(\z*\x+\y*(1+\x*\B)))/ln(1+\x)</expression>
      <argument type="free" index="1">
        <_title>Interest rate</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Payment made each period</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Present value</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Future value</_title>
      </argument>
      <argument type="free" index="5">
        <_title>Type</_title>
      </argument>
    </function>
    <function name="duration" active="false">
      <_title>Duration</_title>
      <_description>Calculates the duration of a security.</_description>
      <expression>0</expression>
      <argument type="date" index="1">
        <_title>Settlement date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>Maturity date</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Annual coupon rate (%)</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Annualized yield (%)</_title>
      </argument>
      <argument type="free" index="5">
        <_title>Frequency</_title>
      </argument>
      <argument type="integer" index="6">
        <_title>Day counting basis</_title>
        <min>0</min>
      </argument>
    </function>
    <function name="g_duration">
      <_title>Periods for investment to attain desired value</_title>
      <_description>Returns the number of periods needed for an investment to attain a desired value.</_description>
      <expression>ln(\z/\y)/ln(1+\x)</expression>
      <argument type="free" index="1">
        <_title>Rate</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Present value</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Future value</_title>
      </argument>
    </function>
    <function name="ppmt">
      <_title>Payment of an annuity going towards principal (PPMT)</_title>
      <_description>Calculates the amount of a payment of an annuity going towards principal.
    
Type defines the due date. 1 for payment at the beginning of a period and 0 (default) for payment at the end of a period.</_description>
      <expression>((-\a*(pow(1+\x,\z))-\B{0})/((1+\x*\C{0})*((pow(1+\x,\z)-1)/\x)))+(\a*pow(1+\x,(\y-1))+((-\a*(pow(1+\x,\z))-\B)/((1+\x*\C)*((pow(1+\x,\z)-1)/\x)))*((pow(1+\x,(\y-1))-1)/\x))*\x</expression>
      <argument type="free" index="1">
        <_title>Periodic interest rate</_title>
      </argument>
      <argument type="integer" index="2">
        <_title>Amortizement period</_title>
        <min>1</min>
      </argument>
      <argument type="integer" index="3">
        <_title>Number of periods</_title>
        <min>1</min>
      </argument>
      <argument type="free" index="4">
        <_title>Present value</_title>
      </argument>
      <argument type="free" index="5">
        <_title>Desired future value</_title>
      </argument>
      <argument type="boolean" index="6">
        <_title>Type</_title>
      </argument>
    </function>
    <function name="effect">
      <_title>Effective interest rate</_title>
      <_description>Calculates the effective interest for a given nominal rate.</_description>
      <expression>(1+\x/\y)^\y-1</expression>
      <argument type="free" index="1">
        <_title>Nominal interest rate</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Periods</_title>
      </argument>
    </function>
    <function name="fv">
      <_title>Future value</_title>
      <_description>Computes the future value of an investment. This is based on periodic, constant payments and a constant interest rate.
    
If type = 1 then the payment is made at the beginning of the period, If type = 0 (or omitted) it is made at the end of each period.</_description>
      <expression>-(\A{0}*((1+\x)^\y)+\z*(1+\x*\B{0})*(((1+\x)^\y-1)/\x))</expression>
      <argument type="free" index="1">
        <_title>Interest rate</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Number of periods</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Payment made each period</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Present value</_title>
      </argument>
      <argument type="boolean" index="5">
        <_title>Type</_title>
      </argument>
    </function>
    <function name="countinuous">
      <_title>Return on continuously compounded interest</_title>
      <_description>Calculates the return on continuously compounded interest, given the principal, nominal rate and time in years.</_description>
      <expression>\x*exp(\y*\z)</expression>
      <argument type="free" index="1">
        <_title>Principal</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Interest rate</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Years</_title>
      </argument>
    </function>
    <function name="compound">
      <_title>Compound</_title>
      <_description>Returns the value of an investment, given the principal, nominal interest rate, compounding frequency and time.</_description>
      <expression>\x*(1+\y/\z)^(\z*\a)</expression>
      <argument type="free" index="1">
        <_title>Principal</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Nominal interest rate</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Periods per Year</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Years</_title>
      </argument>
    </function>
    <function name="ipmt">
      <_title>Payment of an annuity going towards interest (IPMT)</_title>
      <_description>Calculates the amount of a payment of an annuity going towards interest.
    
Type defines the due date. 1 for payment at the beginning of a period and 0 (default) for payment at the end of a period.</_description>
      <expression>-(\a*pow(1+\x,(\y-1))+((-\a*(pow(1+\x,\z))-\B)/((1+\x*\C)*((pow(1+\x,\z)-1)/\x)))*((pow(1+\x,(\y-1))-1)/\x))*\x</expression>
      <argument type="free" index="1">
        <_title>Periodic interest rate</_title>
      </argument>
      <argument type="integer" index="2">
        <_title>Period</_title>
        <min>1</min>
      </argument>
      <argument type="integer" index="3">
        <_title>Number of periods</_title>
        <min>1</min>
      </argument>
      <argument type="free" index="4">
        <_title>Present value</_title>
      </argument>
      <argument type="free" index="5">
        <_title>Future value</_title>
      </argument>
      <argument type="boolean" index="6">
        <_title>Type</_title>
      </argument>
    </function>
    <function name="intrate">
      <_title>Interest rate for a fully invested security</_title>
      <_description>Returns the interest rate for a fully invested security. 
    
Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</_description>
      <expression>(\a-\z)/\z/yearfrac(\x,\y,\B{0},1)</expression>
      <argument type="date" index="1">
        <_title>Settlement date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>Maturity date</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Investment</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Redemption</_title>
      </argument>
      <argument type="integer" index="5">
        <_title>Day counting basis</_title>
        <min>0</min>
      </argument>
    </function>
    <function name="dollarfr">
      <_title>Dollar fraction</_title>
      <_description>Converts a decimal dollar price into a dollar price expressed as a fraction.</_description>
      <expression>int(\x)+frac(\x)*\y/10^ceil(log(\y))</expression>
      <argument type="free" index="1">
        <_title>Decimal dollar</_title>
      </argument>
      <argument type="integer" index="2">
        <_title>Denominator of fraction</_title>
        <min>1</min>
      </argument>
    </function>
    <function name="dollarde">
      <_title>Dollar decimal</_title>
      <_description>Converts a dollar price expressed as a fraction into a dollar price expressed as a decimal number.</_description>
      <expression>int(\x)+frac(\x)*10^ceil(log(\y))/\y</expression>
      <argument type="free" index="1">
        <_title>Fractional dollar</_title>
      </argument>
      <argument type="integer" index="2">
        <_title>Denominator of fraction</_title>
        <min>1</min>
      </argument>
    </function>
    <function name="received">
      <_title>Amount received at maturity for a security bond</_title>
      <_description>Returns the amount received at the maturity date for a invested security. 

Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365. The settlement date must be before maturity date.</_description>
      <expression>\z/(1-\a*yearfrac(\x,\y,\B{0},1))</expression>
      <argument type="date" index="1">
        <_title>Settlement date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>Maturity date</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Investment</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Discount rate</_title>
      </argument>
      <argument type="integer" index="5">
        <_title>Day counting basis</_title>
        <min>0</min>
      </argument>
    </function>
    <function name="disc">
      <_title>Discount rate for a security</_title>
      <_description>Returns the discount rate for a security.
    
Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</_description>
      <expression>(\a-\z)/\a/yearfrac(\x,\y,\B{0},1))</expression>
      <argument type="date" index="1">
        <_title>Settlement date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>Maturity date</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Price per $100 face value</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Redemption</_title>
      </argument>
      <argument type="integer" index="5">
        <_title>Day counting basis</_title>
        <min>0</min>
      </argument>
    </function>
    <function name="accrintm">
      <_title>Accrued interest of security paying at maturity</_title>
      <_description>Returns accrued interest for a security which pays interests at maturity date.
    
Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</_description>
      <expression>\A{1000}*\z*yearfrac(\x,\y,\B{0},1)</expression>
      <argument type="date" index="1">
        <_title>Issue date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>Settlement date</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Annual rate of security</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Par value</_title>
      </argument>
      <argument type="integer" index="5">
        <_title>Day counting basis</_title>
        <min>0</min>
      </argument>
    </function>
    <function name="accrint">
      <_title>Accrued interest of security with periodic interest payments</_title>
      <_description>Returns accrued interest for a security which pays periodic interest.
    
Allowed frequencies are 1 - annual, 2 - semi-annual or 4 - quarterly. Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</_description>
      <expression>\b*\a/\c*\c*yearfrac(\x,\z,\D{0},1)+\y*0</expression>
      <argument type="date" index="1">
        <_title>Issue date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>First interest</_title>
      </argument>
      <argument type="date" index="3">
        <_title>Settlement date</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Annual rate of security</_title>
      </argument>
      <argument type="free" index="5">
        <_title>Par value</_title>
      </argument>
      <argument type="integer" index="6">
        <_title>Number of payments per year</_title>
        <min>1</min>
      </argument>
      <argument type="integer" index="7">
        <_title>Day counting basis</_title>
        <min>0</min>
      </argument>
    </function>
    <function name="coupnum">
      <_title>Number of coupons to be paid</_title>
      <_description>Returns the number of coupons to be paid between the settlement and the maturity.
    
Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</_description>
      <expression>trunc(yearfrac(\x,\y,\A{0},1)*\z)</expression>
      <argument type="date" index="1">
        <_title>Settlement date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>Maturity date</_title>
      </argument>
      <argument type="integer" index="3">
        <_title>Frequency</_title>
        <min>1</min>
      </argument>
      <argument type="integer" index="4">
        <_title>Day counting basis</_title>
        <min>0</min>
      </argument>
    </function>
    <function name="pricedisc">
      <_title>Price per $100 face value of a security bond</_title>
      <_description>Calculates and returns the price per $100 face value of a security bond. The security does not pay interest at maturity.
    
Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</_description>
      <expression>\a-\z*\a*yearfrac(\x,\y,\B{0},1)</expression>
      <argument type="date" index="1">
        <_title>Settlement date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>Maturity date</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Discount</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Redemption</_title>
      </argument>
      <argument type="integer" index="5">
        <_title>Day counting basis</_title>
        <min>0</min>
      </argument>
    </function>
    <function name="pricemat">
      <_title>Price per $100 face value of a security</_title>
      <_description>Calculates and returns the price per $100 face value of a security. The security pays interest at maturity.
    
Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</_description>
      <expression>(100+yearfrac(\z,\y,\C{0},1)*\a*100)/(1+yearfrac(\x,\y,\C,1)*\b)-yearfrac(\z,\x,\C,1)*\a*100</expression>
      <argument type="date" index="1">
        <_title>Settlement date</_title>
      </argument>
      <argument type="date" index="2">
        <_title>Maturity date</_title>
      </argument>
      <argument type="date" index="3">
        <_title>Issue date</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Discount rate</_title>
      </argument>
      <argument type="free" index="5">
        <_title>Annual yield</_title>
      </argument>
      <argument type="integer" index="6">
        <_title>Day counting basis</_title>
        <min>0</min>
      </argument>
    </function>
    <function name="level_coupon">
      <_title>Level-coupon bond</_title>
      <_description>Calculates the value of a level-coupon bond.</_description>
      <expression>(\y*\x/\z)*((1-1/(((1+(\b/\z))^(\a*\z))))/(\b/\z))+(\x/((1+(\b/\z))^(\a*\z)))</expression>
      <argument type="free" index="1">
        <_title>Face value</_title>
      </argument>
      <argument type="free" index="2">
        <_title>Coupon rate</_title>
      </argument>
      <argument type="free" index="3">
        <_title>Coupons per year</_title>
      </argument>
      <argument type="free" index="4">
        <_title>Years</_title>
      </argument>
      <argument type="free" index="5">
        <_title>Market interest rate</_title>
      </argument>
    </function>
  </category>
</QALCULATE>
